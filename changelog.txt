###
fix(requirements): updates incorrect and missing requirements

Updates the requirements file to include missing packages. Supports
Python 3.7+.

This produces a fully working environment for this branch.

###
fix(cpkernel): fix TypeError in remove_node when passing idx=None

Fixes:
    - self.number_nodes not decreasing when passing ``idx=None``.
    - TypeError when None or empty list is passed to len().
    - Incorrect type hinting.

Adds:
    - Support for empty lists.

Refactors:
    - Linting.


###
tests: add fixtures to refactor tests

Adds fixtures to replace duplicated code when generating Grid objects:

    - ``conftest_mock_check_file_exists``: overrides ``os.path.exists`` when
      mocking files.
    - ``conftest_mock_grid_values``: dictionary of numba arrays for layers'
      heights, snowpack densities, temperatures, and liquid water content.
    - ``conftest_mock_grid``: constructs Grid using the dictionary returned by
      ``conftest_mock_grid_values``.
    - ``conftest_mock_grid_ice``: constructs Grid for ice layers using the
      dictionary returned by ``conftest_mock_grid_values``.

###
fix(tests): fix Grid tests

```
coverage run -m --source=. pytest \
    /cosipy/tests/test_GRID_getter_functions.py \
    ./cosipy/tests/test_GRID_update_functions.py
```

Fixes:
    - TypeError when passing list to Grid() instead of numba array.
    - Test failing due to bug in remove_node.

Adds:
    - Pytest markers.

Refactors:
    - Test functions into classes.
    - Module scope of Grid objects and attributes by instantiating at function
      scope.
    - Duplicated code by using fixtures.
    - Equality assertions to use np.allclose instead of pytest.approx, per
      pytest documentation.
    - Duplicated tests into parametrised test functions.
    - Redundant imports to increase performance.
    - Linting


###
fix(tests): fix Node tests

```
coverage run -m --source=. pytest \
    ./cosipy/tests/test_NODE_getter_functions.py \
    ./cosipy/tests/test_NODE_setter_functions.py
```

Fixes:
    - TypeError when passing list to Grid() instead of numba array.

Adds:
    - Method in Node test classes to create a Node.
    - Coverage for existing methods.
    - Pytest markers.

Refactors:
    - Redundant imports by importing ``constants.py`` instead.
    - Test functions into classes. No more overwritten attributes.
    - Module scope of Node objects and attributes by instantiating at function
      scope.
    - Duplicated code by using fixtures.
    - Equality assertions to use np.allclose instead of pytest.approx, per
      pytest documentation.
    - Duplicated tests into parametrised test functions.
    - Linting, docstrings.


###
fix(tests): fix test for updateAlbedo

```
coverage run -m --source=. pytest \
    ./cosipy/tests/test_parameterisation_albedo.py
```

Fixes:
    - TypeError from passing lists instead of numba arrays.
    - Incorrect number of arguments passed to updateAlbedo()

Adds:
    - Pytest markers.

Refactors:
    - Redundant imports by importing ``constants.py`` instead.
    - Test functions into classes. No more overwritten attributes.
    - Duplicated code by using fixtures.
    - Equality assertions to use np.allclose instead of pytest.approx.
    - Linting, docstrings.

###
fix(tests): fix test for densification

```
coverage run -m --source=. pytest \
    ./cosipy/tests/test_parameterisation_densification.py
```

The original test asserted that SWE before densification is equal to the SWE
after densification. This assertion fails since the densification method is
globally set to "Boone", so it has been updated to assert an inequality.

Fixes:
    - TypeError from passing lists instead of numba arrays.
    - Incorrect number of arguments passed to densification()

Adds:
    - Pytest markers.

Refactors:
    - Test functions into classes.
    - Duplicated code by using fixtures.
    - Equality assertions to use np.allclose instead of pytest.approx.
    - Redundant imports.
    - Linting, docstrings.

###
fix(tests): fix test for percolation

```
coverage run -m --source=. pytest \
    ./cosipy/tests/test_parameterisation_percolation.py
```

The test runs correctly but fails, possibly due to a bug in percolation where:
``Q + total_end != water`` i.e. the percolated runoff is greater than the
total initially available water.

Fixes:
    - TypeError from passing lists instead of numba arrays.

Adds:
    - Pytest markers.

Refactors:
    - Test functions into classes.
    - Duplicated code by using fixtures.
    - Equality assertions to use np.allclose instead of pytest.approx.
    - Redundant imports.
    - Linting, docstrings.

###
fix(tests): fix test for refreezing

```
coverage run -m --source=. pytest \
    ./cosipy/tests/test_parameterisation_refreezing.py
```

The test runs correctly but fails, as the liquid water content in the glacier
is not equal to the sum of the liquid water content and refrozen water after
refreezing.

Fixes:
    - TypeError from passing lists instead of numba arrays.
    - Incorrect number of arguments passed to densification()

Adds:
    - Pytest markers.

Refactors:
    - Test functions into classes.
    - Equality assertions to use np.allclose instead of pytest.approx.
    - Redundant imports.
    - Linting, docstrings.

###
fix(tests): fix test for surface roughness

```
coverage run -m --source=. pytest \
    ./cosipy/tests/test_parameterisation_roughness.py
```

Fixes:
    - TypeError from passing lists instead of numba arrays.
    - Incorrect number of arguments passed to densification()

Adds:
    - Pytest markers.

Refactors:
    - Test functions into classes.
    - Duplicated code by using fixtures.
    - Equality assertions to use np.allclose instead of pytest.approx.
    - Redundant imports.
    - Linting, docstrings.

###
fix(tests): fix test for surface temperature

The arguments passed to update_surface_temperature() did not match the
function's expected arguments.

```
coverage run -m --source=. pytest \
    ./cosipy/tests/test_parameterisation_surfaceTemperature.py
```

Fixes:
    - TypeError from passing lists instead of numba arrays.
    - Incorrect arguments passed to update_surface_temperature()
    - ValueError in test when passing ``N=None``.

Adds:
    - Pytest markers.

Refactors:
    - Test functions into classes.
    - Duplicated code by using fixtures.
    - Equality assertions to use np.allclose instead of pytest.approx.
    - Redundant imports.
    - Linting, docstrings.

###
feat(postprocessing): support single variables, daily mean in field plots

Does not yet support WRF data with "south_north", "west_east".

```
coverage run -m --source=. pytest \
    ./cosipy/tests/test_postprocessing_field_plots.py
```

Fixes:
    - ValueError when plotting elevation due to missing time dimension.
    - ValueError when passing a date timestamp without hours/minutes.

Adds:
    - Support for plotting a single variable with ``--var <str>``.
    - Support for plotting the daily mean instead of a timestep with
      ``--mean``.
    - Tests.
    
Replaced:
    - Invisible coastlines with elevation contours on all plots.
    - Hardcoded subplots with automatic generation.

Refactors:
    - Duplicated and overly long code.
    - Argument parsing to be more robust.
    - Image saving so the file name is automatically generated from the
      plot's properties.
    - Linting, type hinting, docstrings, README.
    
###
fix(postprocessing): fix vtk plots

Might support WRF data with "south_north", "west_east". Does not fix smoothing
bug as PolyData is non-manifold.

Fixes:
    - Missing points due to referencing latitude, longitude in the wrong
      order.
    - Glacier surface flipped along y-axis.
    - Plotted DEM being solid red.
    - Smudged colours and invisible contours from wrong interpolation.
    - Contour divisions not visibly delineated.
    - Incorrect plot orientation.
    - Camera position.
    - DEM creation using incorrect coordinates.

Adds:
    - Support for data with "lat", "lon" as dimensions.
    - Support for plotting elevation.
    - Support for plotting the daily mean.
    - Conversion from UnstructuredGrid to PolyData.
    - Warning for invalid point IDs.
    - Tests

Refactors:
    - Duplicated and overly long code.
    - Vtk code structure to follow a more logical order.
    - Changes colour lookup table to match matplotlib field plots.
    - Subdivision/smoothing filters: these are not yet correctly
      implemented.
    - Linting, type hinting, docstrings.

###
fix(tests): pytest missing an init file 

Fixes pytest not working as standalone due to a missing init file.

###
feat(tests): check test output for expected value and type 

Adds function `check_output(value, target)` to `conftest_boilerplate` which
checks that the value and its type matches the target value and type.

###
refactor: harden .coveragerc logic and .gitignore

Includes test definitions in coverage, so redundant test logic is easier to
catch.

Adds coverage support for pragma, defensive/abstract/non-runnable errors.

###
feat(tests): patch global variables during tests

Adds ability to patch global variables when running tests, which avoids the
need to hardcode or modify the variables directly. Call within a test function
using:
    
    conftest_boilerplate.patch_variable(
        monkeypatch, module="foo.bar", new_params={"var01": 1.0, "var02": 3.2}
        )

###
chore: standardised docstrings, fix namespace pollution

Formats docstrings in `node.py` and `grid.py` to be more consistent.

Fixes outdated parameters in docstrings, typos, missing type hints, and some
phrasing.

Fixes dangerous namespace pollution when using "from x import *", especially
since most of the imported objects are unused.

###
feat: warn user when percolation bug occurs

Adds a printed warning when percolation fails a sanity check, where the total
water after percolating is greater than the initially available water.

The warning includes the timestep when this occurs.

###
fix: error when numba compiles error message, namespace pollution

Adds and refactors tests for albedo parametrisation.

Fixes:
    - numba throwing an Exception when raising a ValueError with a message.
    - namespace pollution when importing from constants.

###
refactor(tests): simplify tests for Node

Fixes an incorrect test reference for ``set_layer_temperature``

Refactors duplicate code for testing ``Node`` get/set methods as fixtures.